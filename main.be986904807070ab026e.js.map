{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger2","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","result","logError","warn","amount","catch"],"mappings":"yLAIMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACPD,EAAQF,KACTA,OAILI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAACC,GAIhBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAMnEC,EAAU,SAAAC,GAAY,OAAIZ,QAAQa,MAAMD,IAE9CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAInC,IAIMG,EAAkB,SAACC,GAErB,OAAO,IAAIpB,SAAQ,SAACC,EAASoB,GACzB,IAP2BC,EAAKC,EAO1BzB,GAPqBwB,EAOa,IAPRC,EAOa,IAN5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAQ9CpB,YAAW,WACYsB,KAAKE,SAAW,GAE/BzB,EAAQ,CAACmB,EAAYO,GAAI7B,IAEzBuB,EAAOD,EAAYO,MAExB7B,OAIL8B,EAAa,SAACC,GAChBxB,QAAQC,IAAR,eAA2BuB,EAAO,GAAlC,iBAAqDA,EAAO,GAA5D,OAGEC,EAAW,SAAAH,GACftB,QAAQ0B,KAAR,gCAA6CJ,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,KAC/BzB,KAAKqB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH,K","file":"main.be986904807070ab026e.js","sourcesContent":["import './styles.css';\r\n\r\n// Задание 1--------------------------------------------------------------\r\n\r\nconst delay = ms => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms);\r\n    });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n// Задание 2--------------------------------------------------------------\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n        resolve(updatedUsers);\r\n     });\r\n};\r\n\r\nconst logger2 = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger2);\r\ntoggleUserState(users, 'Lux').then(logger2);\r\n\r\n// Задание 3--------------------------------------------------------------\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  \r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n            if (canProcess) {\r\n                resolve([transaction.id, delay]);\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay);\r\n    });\r\n};\r\n\r\nconst logSuccess = (result) => {\r\n    console.log(`Transaction ${result[0]} processed in ${result[1]}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}